# coding: utf-8

"""
    Wishlist Service

    API for managing wishlists

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wishlist.models.wishlist_localized_text import WishlistLocalizedText
from typing import Optional, Set
from typing_extensions import Self

class WishlistWishlistItemResponse(BaseModel):
    """
    WishlistWishlistItemResponse
    """ # noqa: E501
    id: Optional[StrictStr] = None
    grn: Optional[StrictStr] = None
    wishlist_id: Optional[StrictStr] = Field(default=None, alias="wishlistId")
    item_grn: Optional[StrictStr] = Field(default=None, alias="itemGrn")
    preferred_quantity: Optional[StrictStr] = Field(default=None, alias="preferredQuantity")
    description: Optional[WishlistLocalizedText] = None
    added_by_customer_grn: Optional[StrictStr] = Field(default=None, alias="addedByCustomerGrn")
    added_at: Optional[datetime] = Field(default=None, alias="addedAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "grn", "wishlistId", "itemGrn", "preferredQuantity", "description", "addedByCustomerGrn", "addedAt", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WishlistWishlistItemResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WishlistWishlistItemResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "grn": obj.get("grn"),
            "wishlistId": obj.get("wishlistId"),
            "itemGrn": obj.get("itemGrn"),
            "preferredQuantity": obj.get("preferredQuantity"),
            "description": WishlistLocalizedText.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "addedByCustomerGrn": obj.get("addedByCustomerGrn"),
            "addedAt": obj.get("addedAt"),
            "updatedAt": obj.get("updatedAt")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


