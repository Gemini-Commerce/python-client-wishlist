# coding: utf-8

"""
    Wishlist Service

    API for managing wishlists

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from wishlist.models.wishlist_localized_text import WishlistLocalizedText
from wishlist.models.wishlist_privacy import WishlistPrivacy
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WishlistCreateWishlistRequest(BaseModel):
    """
    WishlistCreateWishlistRequest
    """ # noqa: E501
    tenant_id: StrictStr = Field(alias="tenantId")
    privacy: WishlistPrivacy
    label: Optional[WishlistLocalizedText] = None
    description: Optional[WishlistLocalizedText] = None
    customer_grn: Optional[StrictStr] = Field(default=None, description="If the customer GRN is set on JWT, it will be used as default. Otherwise, it will be used the customer_grn field.", alias="customerGrn")
    is_default: Optional[StrictBool] = Field(default=None, alias="isDefault")
    __properties: ClassVar[List[str]] = ["tenantId", "privacy", "label", "description", "customerGrn", "isDefault"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WishlistCreateWishlistRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of label
        if self.label:
            _dict['label'] = self.label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WishlistCreateWishlistRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "privacy": obj.get("privacy"),
            "label": WishlistLocalizedText.from_dict(obj.get("label")) if obj.get("label") is not None else None,
            "description": WishlistLocalizedText.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "customerGrn": obj.get("customerGrn"),
            "isDefault": obj.get("isDefault")
        })
        return _obj


